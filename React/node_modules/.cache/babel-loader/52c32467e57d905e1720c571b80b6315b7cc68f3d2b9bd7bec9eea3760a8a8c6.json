{"ast":null,"code":"// This ride.service.js containing all the API request to the microservices - Auth.go required in the project.\nimport { upload } from \"@testing-library/user-event/dist/upload\";\nimport axios from \"axios\";\n\n//const AUTH_URL = \"https://auth-4dcnj7fm6a-uc.a.run.app/api/auth/\"\nconst AUTH_URL = \"http://localhost:5050/api/auth\";\naxios.defaults.withCredentials = true;\nlet axiosConfig = {\n  headers: {\n    'Content-Type': 'text/plain'\n    // \"Access-Control-Allow-Origin\": \"http://localhost:3000\"\n  },\n\n  withCredentials: true\n};\nconst register_student = (name, email, password, school, subjects) => {\n  return axios.post(AUTH_URL + \"signup/student\", {\n    \"name\": name,\n    \"email\": email,\n    \"password\": password,\n    \"school\": school,\n    \"area_of_interest\": subjects\n  }, axiosConfig);\n};\nconst register_tutor = (name, email, password, hourlyRate, availability, subjects, uploadedFiles) => {\n  return axios.post(AUTH_URL + \"signup/tutor\", {\n    \"name\": name,\n    \"email\": email,\n    \"password\": password,\n    \"hourly_rate\": hourlyRate,\n    \"availability\": availability,\n    \"area_of_interest\": subjects,\n    \"cert_of_evidence\": uploadedFiles\n  }, axiosConfig);\n};\nconst login = (email_address, password) => {\n  return axios.post(AUTH_URL + \"login\", {\n    \"email\": email_address,\n    \"password\": password\n  }, axiosConfig).then(response => {\n    console.log(response.data);\n    if (response.data.email) {\n      delete response.data.password;\n      localStorage.setItem(\"user\", JSON.stringify(response.data));\n    }\n    return response.data;\n  });\n};\nconst logout = () => {\n  localStorage.clear();\n};\nconst getCurrentUser = () => {\n  return JSON.parse(localStorage.getItem(\"user\"));\n};\nconst AuthService = {\n  register_student,\n  register_tutor,\n  login,\n  logout,\n  getCurrentUser\n};\nexport default AuthService;","map":{"version":3,"names":["upload","axios","AUTH_URL","defaults","withCredentials","axiosConfig","headers","register_student","name","email","password","school","subjects","post","register_tutor","hourlyRate","availability","uploadedFiles","login","email_address","then","response","console","log","data","localStorage","setItem","JSON","stringify","logout","clear","getCurrentUser","parse","getItem","AuthService"],"sources":["/Users/chenhan/Desktop/eti_assignment2/React/src/services/auth.service.js"],"sourcesContent":["// This ride.service.js containing all the API request to the microservices - Auth.go required in the project.\nimport { upload } from \"@testing-library/user-event/dist/upload\";\nimport axios from \"axios\";\n\n//const AUTH_URL = \"https://auth-4dcnj7fm6a-uc.a.run.app/api/auth/\"\nconst AUTH_URL = \"http://localhost:5050/api/auth\"\n\naxios.defaults.withCredentials = true\nlet axiosConfig = {\n    headers: {\n        'Content-Type': 'text/plain',\n       // \"Access-Control-Allow-Origin\": \"http://localhost:3000\"\n    },\n    withCredentials : true,\n}\n\nconst register_student = (name, email, password, school, subjects) => {\n    return axios.post(AUTH_URL + \"signup/student\", {\n        \"name\" : name,\n        \"email\": email,\n        \"password\" : password,\n        \"school\" : school,\n        \"area_of_interest\": subjects\n    }, axiosConfig);\n};\n\n\nconst register_tutor = (name, email, password, hourlyRate, availability, subjects, uploadedFiles) => {\n    return axios.post(AUTH_URL + \"signup/tutor\", {\n        \"name\" : name,\n        \"email\": email,\n        \"password\" : password,\n        \"hourly_rate\": hourlyRate,\n        \"availability\": availability,\n        \"area_of_interest\": subjects,\n        \"cert_of_evidence\": uploadedFiles\n    }, axiosConfig);\n};\n\n\n\nconst login = (email_address, password) => {\n    return axios.post(AUTH_URL + \"login\", {\n        \"email\": email_address,\n        \"password\": password },\n        axiosConfig)\n            .then((response) => {\n                console.log(response.data)\n            if (response.data.email) {\n\n                delete response.data.password\n                localStorage.setItem(\"user\", JSON.stringify(response.data));\n            }\n        return response.data;\n      });\n      \n};\n  \nconst logout = () => {\n    localStorage.clear();\n};\n\n\nconst getCurrentUser = () => {\n    return JSON.parse(localStorage.getItem(\"user\"));\n};\n  \n\nconst AuthService = {\n    register_student,\n    register_tutor,\n    login,\n    logout,\n    getCurrentUser,\n}\n\n  \nexport default AuthService;\n\n\n\n"],"mappings":"AAAA;AACA,SAASA,MAAM,QAAQ,yCAAyC;AAChE,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,QAAQ,GAAG,gCAAgC;AAEjDD,KAAK,CAACE,QAAQ,CAACC,eAAe,GAAG,IAAI;AACrC,IAAIC,WAAW,GAAG;EACdC,OAAO,EAAE;IACL,cAAc,EAAE;IACjB;EACH,CAAC;;EACDF,eAAe,EAAG;AACtB,CAAC;AAED,MAAMG,gBAAgB,GAAG,CAACC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,QAAQ,KAAK;EAClE,OAAOX,KAAK,CAACY,IAAI,CAACX,QAAQ,GAAG,gBAAgB,EAAE;IAC3C,MAAM,EAAGM,IAAI;IACb,OAAO,EAAEC,KAAK;IACd,UAAU,EAAGC,QAAQ;IACrB,QAAQ,EAAGC,MAAM;IACjB,kBAAkB,EAAEC;EACxB,CAAC,EAAEP,WAAW,CAAC;AACnB,CAAC;AAGD,MAAMS,cAAc,GAAG,CAACN,IAAI,EAAEC,KAAK,EAAEC,QAAQ,EAAEK,UAAU,EAAEC,YAAY,EAAEJ,QAAQ,EAAEK,aAAa,KAAK;EACjG,OAAOhB,KAAK,CAACY,IAAI,CAACX,QAAQ,GAAG,cAAc,EAAE;IACzC,MAAM,EAAGM,IAAI;IACb,OAAO,EAAEC,KAAK;IACd,UAAU,EAAGC,QAAQ;IACrB,aAAa,EAAEK,UAAU;IACzB,cAAc,EAAEC,YAAY;IAC5B,kBAAkB,EAAEJ,QAAQ;IAC5B,kBAAkB,EAAEK;EACxB,CAAC,EAAEZ,WAAW,CAAC;AACnB,CAAC;AAID,MAAMa,KAAK,GAAG,CAACC,aAAa,EAAET,QAAQ,KAAK;EACvC,OAAOT,KAAK,CAACY,IAAI,CAACX,QAAQ,GAAG,OAAO,EAAE;IAClC,OAAO,EAAEiB,aAAa;IACtB,UAAU,EAAET;EAAS,CAAC,EACtBL,WAAW,CAAC,CACPe,IAAI,CAAEC,QAAQ,IAAK;IAChBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACG,IAAI,CAAC;IAC9B,IAAIH,QAAQ,CAACG,IAAI,CAACf,KAAK,EAAE;MAErB,OAAOY,QAAQ,CAACG,IAAI,CAACd,QAAQ;MAC7Be,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAACG,IAAI,CAAC,CAAC;IAC/D;IACJ,OAAOH,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC;AAER,CAAC;AAED,MAAMK,MAAM,GAAG,MAAM;EACjBJ,YAAY,CAACK,KAAK,EAAE;AACxB,CAAC;AAGD,MAAMC,cAAc,GAAG,MAAM;EACzB,OAAOJ,IAAI,CAACK,KAAK,CAACP,YAAY,CAACQ,OAAO,CAAC,MAAM,CAAC,CAAC;AACnD,CAAC;AAGD,MAAMC,WAAW,GAAG;EAChB3B,gBAAgB;EAChBO,cAAc;EACdI,KAAK;EACLW,MAAM;EACNE;AACJ,CAAC;AAGD,eAAeG,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}